/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import mini_projet_errahem_karim.connexion;

/**
 *
 * @author Karim
 */
public class Ajoute_repas extends javax.swing.JPanel {

    /**
     * Creates new form Ajoute_repas
     */
    public Ajoute_repas() {
        initComponents();
         getArticles();
         entete_tab();
           entete_tab3();
         remplirTableauRepas();
       
    }
    private int getArticleIdByName(String articleName) {
        int articleId = -1; // Default value if article is not found
        connexion c = new connexion();
        String query = "SELECT id FROM fooditems WHERE name = ?";
        try {
            PreparedStatement pstmt = c.con.prepareStatement(query);
            pstmt.setString(1, articleName);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                articleId = rs.getInt("id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } 
        return articleId;
    }
    public void entete_tab2(){
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Nom");
    model.addColumn("Calories");
    model.addColumn("Carbohydrates");
    model.addColumn("Proteins");
    model.addColumn("Fats");
   // Ajoutez la colonne Quantité

    Tar.setModel(model); // Définissez le modèle de tableau
    
    }
    public void entete_tab3() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Nom");
    model.addColumn("Type");

    jTablelistedesrepas.setModel(model); // Définissez le modèle de tableau
}
     private void remplirTableauRepas() {
    DefaultTableModel model = (DefaultTableModel) jTablelistedesrepas.getModel();

    // Supprimer toutes les lignes existantes du tableau
   
    // Effectuer la requête SQL pour récupérer les repas
    String query = "SELECT name, type FROM meals";
    connexion c = new connexion(); // Vous devez fournir votre propre connexion à la base de données ici

    try {
        PreparedStatement pstmt = c.con.prepareStatement(query);
        ResultSet rs = pstmt.executeQuery();

        // Parcourir le résultat de la requête et ajouter chaque repas au tableau
        while (rs.next()) {
            String name = rs.getString("name");
            String type = rs.getString("type");

            // Ajouter une nouvelle ligne au modèle de tableau avec les données du repas
            model.addRow(new Object[]{name, type});
        }

        // Fermer la connexion et les ressources associées
        rs.close();
        pstmt.close();
        c.con.close();
    } catch (SQLException e) {
        e.printStackTrace();
        // Gérer l'erreur de requête SQL ici
    }
}
    public void entete_tab(){
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Nom");
    model.addColumn("Calories");
    model.addColumn("Carbohydrates");
    model.addColumn("Proteins");
    model.addColumn("Fats");
    model.addColumn("Quantité"); // Ajoutez la colonne Quantité

    Tart.setModel(model); // Définissez le modèle de tableau
    
    }
private void getArticles() {
        connexion c = new connexion();
        String query = "SELECT name FROM fooditems";
        try {
            PreparedStatement pstmt = c.con.prepareStatement(query);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                String articleName = rs.getString("name");
                Articlesenbd.addItem(articleName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entete1 = new component.Entete();
        jLabel9 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tart = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        nrepas = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        Articlesenbd = new javax.swing.JComboBox();
        A = new javax.swing.JLabel();
        Tarticle = new javax.swing.JLabel();
        supprimer_un_article_autableau = new javax.swing.JButton();
        ajouter_un_article_autableau = new javax.swing.JButton();
        quantiter = new javax.swing.JTextField();
        q = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tar = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        nomA = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        car = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pro = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        fat = new javax.swing.JTextField();
        Ajouter_article = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablelistedesrepas = new javax.swing.JTable();
        Supprimer_repas = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Repas et Articles");

        javax.swing.GroupLayout entete1Layout = new javax.swing.GroupLayout(entete1);
        entete1.setLayout(entete1Layout);
        entete1Layout.setHorizontalGroup(
            entete1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entete1Layout.createSequentialGroup()
                .addGap(320, 320, 320)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        entete1Layout.setVerticalGroup(
            entete1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entete1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel9)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.setBackground(new java.awt.Color(242, 242, 242));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 242));

        Tart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Tart);

        jLabel1.setText("Nom de Repas");

        jLabel2.setText("Type de Repas");

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "breakfast", "dinner", "lunch" }));

        jButton1.setText("Ajouter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        A.setText("Articles");

        Tarticle.setText("Articles de Repas");

        supprimer_un_article_autableau.setText("supprimer");
        supprimer_un_article_autableau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimer_un_article_autableauActionPerformed(evt);
            }
        });

        ajouter_un_article_autableau.setText("Selectioner");
        ajouter_un_article_autableau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouter_un_article_autableauActionPerformed(evt);
            }
        });

        q.setText("qunatiter");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(136, 136, 136)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nrepas)
                                    .addComponent(type, 0, 155, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(A)
                                            .addComponent(q))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(quantiter)
                                            .addComponent(Articlesenbd, 0, 155, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(supprimer_un_article_autableau)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                        .addComponent(ajouter_un_article_autableau)
                                        .addGap(15, 15, 15))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(Tarticle)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(286, 286, 286))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Articlesenbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(A))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(q))
                        .addGap(45, 45, 45))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(Tarticle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supprimer_un_article_autableau)
                    .addComponent(ajouter_un_article_autableau))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nrepas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ajouter Repas", jPanel1);

        jPanel2.setBackground(new java.awt.Color(242, 242, 242));

        Tar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(Tar);

        jLabel3.setText("Nom d'article");

        jLabel4.setText("Calories");

        jLabel5.setText("Carbohydrates");

        jLabel6.setText("\tProteins");

        jLabel7.setText("Fats");

        Ajouter_article.setText("Ajouter");
        Ajouter_article.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ajouter_articleActionPerformed(evt);
            }
        });

        jButton4.setText("Supprimer");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel3))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(pro, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(car, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cal, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomA, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Ajouter_article, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                        .addGap(125, 125, 125))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(196, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nomA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(car, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ajouter_article))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(" Articles", jPanel2);

        jPanel3.setBackground(new java.awt.Color(242, 242, 242));

        jTablelistedesrepas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTablelistedesrepas);

        Supprimer_repas.setText("Supprimer");
        Supprimer_repas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Supprimer_repasMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Liste des repas  ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(Supprimer_repas, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(304, 304, 304))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(279, 279, 279))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(Supprimer_repas)
                .addGap(64, 64, 64))
        );

        jTabbedPane1.addTab("Supprimer Repas", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(entete1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(entete1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ajouter_un_article_autableauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouter_un_article_autableauActionPerformed
      // Obtenez la quantité à partir du JTextField
    String quantityText = quantiter.getText();

    // Vérifiez si le champ de quantité est vide
    if (quantityText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Veuillez saisir une quantité", "Erreur", JOptionPane.ERROR_MESSAGE);
        return; // Sortir de la méthode si le champ de quantité est vide
    }

    // Vérifiez si la quantité est un nombre
    try {
        int quantity = Integer.parseInt(quantityText);

        // Obtenez l'ID de l'article sélectionné dans le JComboBox
        String selectedArticleName = (String) Articlesenbd.getSelectedItem();
        int articleId = getArticleIdByName(selectedArticleName);

        // Vérifiez si l'ID est valide
        if (articleId != -1) {
            // Effectuez la requête pour obtenir les détails de l'article
            connexion c = new connexion();
            String query = "SELECT name, calories, carbohydrates, proteins, fats FROM fooditems WHERE id = ?";
            try {
                PreparedStatement pstmt = c.con.prepareStatement(query);
                pstmt.setInt(1, articleId);
                ResultSet rs = pstmt.executeQuery();

                // Remplissez le tableau avec les résultats de la requête
                DefaultTableModel model = (DefaultTableModel) Tart.getModel(); // Récupérez le modèle de tableau existant

                while (rs.next()) {
                    String name = rs.getString("name");
                    int calories = rs.getInt("calories");
                    int carbohydrates = rs.getInt("carbohydrates");
                    int proteins = rs.getInt("proteins");
                    int fats = rs.getInt("fats");

                    // Ajoutez une nouvelle ligne au modèle de tableau avec la quantité
                    model.addRow(new Object[]{name, calories, carbohydrates, proteins, fats, quantity});
                }

                // Set the table model to the JTable
                Tart.setModel(model);
                quantiter.setText("");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            // Si l'ID de l'article est invalide, affichez un message d'erreur
            JOptionPane.showMessageDialog(this, "Article non trouvé", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        // Si la quantité n'est pas un nombre, affichez un message d'erreur
        JOptionPane.showMessageDialog(this, "Veuillez saisir une quantité valide", "Erreur", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_ajouter_un_article_autableauActionPerformed

    private void supprimer_un_article_autableauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimer_un_article_autableauActionPerformed
                                                               
    // Obtenez l'indice de la ligne sélectionnée dans le tableau Tart
    int selectedRow = Tart.getSelectedRow();

    // Vérifiez si une ligne est sélectionnée
    if (selectedRow != -1) {
        // Obtenez le modèle de tableau
        DefaultTableModel model = (DefaultTableModel) Tart.getModel();

        // Supprimez la ligne sélectionnée
        model.removeRow(selectedRow);
    } else {
        // Si aucune ligne n'est sélectionnée, affichez un message de contrôle
         JOptionPane.showMessageDialog(this, "Aucune ligne sélectionnée.", "Erreur", JOptionPane.ERROR_MESSAGE);
       
    }


    }//GEN-LAST:event_supprimer_un_article_autableauActionPerformed
private void insertMealItem(int mealId, int articleId, int quantiter) {
    // Requête SQL pour insérer un élément de repas dans la table mealitems
    String query = "INSERT INTO mealitems (meal_id, food_item_id, quantity) VALUES (?, ?, ?)";
    
    // Obtenir la connexion à la base de données
    connexion c = new connexion();
    
    
    try {
        // Préparer la déclaration SQL
        PreparedStatement pstmt = c.con.prepareStatement(query);
        
        // Remplacer les paramètres de la requête par les valeurs fournies
        pstmt.setInt(1, mealId);
        pstmt.setInt(2, articleId);
        pstmt.setInt(3, quantiter);
        
        // Exécuter la requête d'insertion
        pstmt.executeUpdate();
        
        // Fermer la déclaration
        pstmt.close();
    } catch (SQLException e) {
        // En cas d'erreur, afficher un message d'erreur
        JOptionPane.showMessageDialog(this, "Erreur lors de l'insertion de l'élément du repas : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       // Vérifier si Tart est vide
    if (isTartEmpty(Tart)) {
        JOptionPane.showMessageDialog(this, "Vous n'avez pas ajouté d'articles.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return;
    } else {
        // Vérifier si le champ nrepas est vide
        String nomr = nrepas.getText();
        if (nomr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Veuillez saisir un nom de repas.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            // Récupérer le type de repas sélectionné
            String type1 = (String) type.getSelectedItem();
            
            // Insérer le repas dans la table meals
            insertRepas(nomr, type1);
            
            // Récupérer l'identifiant du repas inséré
            int idmeal = getIdMealByName(nomr);
            
            // Récupérer les identifiants des articles et leurs quantités
            List<Integer> articleIds = getArticleIdsFromTart();
            List<Integer> quantiterList = getQuantiterIdsFromTart();
            
            // Vérifier si les listes ont la même taille
            if (articleIds.size() != quantiterList.size()) {
                JOptionPane.showMessageDialog(this, "Erreur: Nombre d'articles et de quantités ne correspondent pas.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Insérer les éléments du repas dans la table mealitems
            for (int i = 0; i < articleIds.size(); i++) {
                int articleId = articleIds.get(i);
                int quantiter = quantiterList.get(i);
                
                // Insérer l'élément du repas dans la table mealitems
                insertMealItem(idmeal, articleId, quantiter);
            }
            clearTart(Tart);
            nrepas.setText("");
             remplirTableauRepas();
        }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
    entete_tab2();
        fillTartTable();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      // Obtenez l'indice de la ligne sélectionnée dans le tableau Tart
    int selectedRow = Tar.getSelectedRow();

    // Vérifiez si une ligne est sélectionnée
    if (selectedRow != -1) {
        // Obtenez le modèle de tableau
        DefaultTableModel model = (DefaultTableModel) Tar.getModel();
String articleName = (String) model.getValueAt(selectedRow, 0); 
 int articleId = getArticleIdByName(articleName);
       deleteFoodItem(articleId);
    } else {
        // Si aucune ligne n'est sélectionnée, affichez un message de contrôle
         JOptionPane.showMessageDialog(this, "Aucune ligne sélectionnée.", "Erreur", JOptionPane.ERROR_MESSAGE);
       
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void Ajouter_articleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ajouter_articleActionPerformed
    String nom = nomA.getText();
    String calValue = cal.getText();
    String carbValue = car.getText();
    String protValue = pro.getText();
    String faValue = fat.getText();
    int calo = Integer.parseInt(calValue);
    float carb = Float.parseFloat(carbValue);
    float prot = Float.parseFloat(protValue);
    float fa = Float.parseFloat(faValue);
    
    
    // Requête SQL pour ajouter un nouvel article à la table fooditems
    String query = "INSERT INTO fooditems(name, calories, carbohydrates, proteins, fats) VALUES (?, ?, ?, ?, ?)";
    
    // Obtenir la connexion à la base de données
    connexion c = new connexion();
    // Vérifier si tous les champs sont remplis
    if (nom.isEmpty() || calValue.isEmpty() || carbValue.isEmpty() || protValue.isEmpty() || faValue.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return; // Sortir de la méthode si au moins un champ est vide
    }
    
    // Vérifier si les champs numériques contiennent des valeurs numériques
    if (!isNumeric(calValue) || !isNumeric(carbValue) || !isNumeric(protValue) || !isNumeric(faValue)) {
        // Afficher un message d'erreur si l'une des valeurs n'est pas numérique
        JOptionPane.showMessageDialog(this, "Les champs calories, carbohydrates, proteins et fats doivent être numériques.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return; // Sortir de la méthode en cas d'erreur
    }
    
    try {
        // Préparer la déclaration SQL
        PreparedStatement pstmt = c.con.prepareStatement(query);
        
        // Remplacer les paramètres de la requête par les valeurs fournies
        pstmt.setString(1, nom);
        pstmt.setInt(2, calo);
        pstmt.setFloat(3, carb);
        pstmt.setFloat(4, prot);
        pstmt.setFloat(5, fa);
        
        // Exécuter la requête d'insertion
        pstmt.executeUpdate();
        
        // Fermer la déclaration SQL
        pstmt.close();
        
        // Afficher un message de succès
        JOptionPane.showMessageDialog(this, "L'article a été ajouté avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
        
        // Effacer les champs de saisie après l'ajout
        nomA.setText("");
        cal.setText("");
        car.setText("");
        pro.setText("");
        fat.setText("");
        Articlesenbd.addItem(nom);
        // Actualiser le contenu du tableau après l'ajout
        fillTartTable(); // Vous devez définir la méthode fillTartTable pour remplir le tableau avec les données mises à jour
    } catch (SQLException e) {
        // En cas d'erreur, afficher un message d'erreur
        JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout de l'article : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_Ajouter_articleActionPerformed

    private void Supprimer_repasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Supprimer_repasMouseClicked
         // Récupérer l'index de la ligne sélectionnée dans le tableau
    int rowIndex = jTablelistedesrepas.getSelectedRow();
    
    // Vérifier si une ligne est effectivement sélectionnée
    if (rowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un repas à supprimer.", "Aucune sélection", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Récupérer le nom du repas dans la ligne sélectionnée
    String repasASupprimer = (String) jTablelistedesrepas.getValueAt(rowIndex, 0);
    
    // Confirmation de la suppression avec une boîte de dialogue
    int option = JOptionPane.showConfirmDialog(this, "Êtes-vous sûr de vouloir supprimer le repas sélectionné ?", "Confirmation de suppression", JOptionPane.YES_NO_OPTION);
    
    if (option == JOptionPane.YES_OPTION) {
        // Effectuer la suppression dans la base de données
        connexion c = new connexion(); // Vous devez fournir votre propre connexion à la base de données ici
        String query = "DELETE FROM meals WHERE Name = ?";
        
        try {
            PreparedStatement pstmt = c.con.prepareStatement(query);
            pstmt.setString(1, repasASupprimer);
            int rowsAffected = pstmt.executeUpdate();
            
            if (rowsAffected > 0) {
                // Si la suppression a réussi, mettre à jour le tableau
                DefaultTableModel model = (DefaultTableModel) jTablelistedesrepas.getModel();
                model.removeRow(rowIndex);
                JOptionPane.showMessageDialog(this, "Le repas a été supprimé avec succès.", "Suppression réussie", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "La suppression du repas a échoué.", "Erreur de suppression", JOptionPane.ERROR_MESSAGE);
            }
            
            // Fermer la connexion et les ressources associées
            pstmt.close();
            c.con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // Gérer l'erreur de suppression ici
        }
    }
    }//GEN-LAST:event_Supprimer_repasMouseClicked
private boolean isNumeric(String str) {
    try {
        // Essayer de convertir la chaîne en un nombre entier
        Integer.parseInt(str);
        // Si la conversion réussit, alors la chaîne est numérique
        return true;
    } catch (NumberFormatException e1) {
        try {
            // Essayer de convertir la chaîne en un nombre flottant
            Float.parseFloat(str);
            // Si la conversion réussit, alors la chaîne est numérique
            return true;
        } catch (NumberFormatException e2) {
            // Si la conversion échoue, alors la chaîne n'est pas numérique
            return false;
        }
    }
}

    
 public boolean isTartEmpty(JTable Tart) {
DefaultTableModel model = (DefaultTableModel) Tart.getModel();
return model.getRowCount() == 0;
}
private void clearTart(JTable Tart) {
DefaultTableModel model = (DefaultTableModel) Tart.getModel();
model.setRowCount(0);
}
private List<Integer> getQuantiterIdsFromTart() {
    List<Integer> quantiterList = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) Tart.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        // Récupérer la valeur de la cellule en tant qu'objet
        Object quantiterObject = model.getValueAt(i, 5);
        if (quantiterObject instanceof Integer) {
            // Si la valeur est un Integer, la convertir en int et l'ajouter à la liste
            int quantiter = (Integer) quantiterObject;
            quantiterList.add(quantiter);
        } else {
            // Gérer le cas où la valeur n'est pas un Integer (par exemple, si elle est null ou une autre classe)
            System.err.println("La valeur de la cellule n'est pas un Integer à la ligne " + i);
        }
    }
    return quantiterList;
}
private List<Integer> getArticleIdsFromTart() {
 List<Integer> articleIds = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) Tart.getModel();
for (int i = 0; i < model.getRowCount(); i++) {
  String articleName = (String) model.getValueAt(i, 0); 
 int articleId = getArticleIdByName(articleName);
 articleIds.add(articleId);}
    return articleIds;
}
private int getIdMealByName(String mealName) {
int mealId = -1;
String query = "SELECT id FROM meals WHERE name = ?";
connexion c = new connexion();
 try {
PreparedStatement pstmt = c.con.prepareStatement(query);
pstmt.setString(1, mealName);
 ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
 mealId = rs.getInt("id");
        }
 rs.close();
pstmt.close();

    } catch (SQLException e) {
 e.printStackTrace();
    }
return mealId;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A;
    private javax.swing.JButton Ajouter_article;
    private javax.swing.JComboBox Articlesenbd;
    private javax.swing.JButton Supprimer_repas;
    private javax.swing.JTable Tar;
    private javax.swing.JTable Tart;
    private javax.swing.JLabel Tarticle;
    private javax.swing.JButton ajouter_un_article_autableau;
    private javax.swing.JTextField cal;
    private javax.swing.JTextField car;
    private component.Entete entete1;
    private javax.swing.JTextField fat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTablelistedesrepas;
    private javax.swing.JTextField nomA;
    private javax.swing.JTextField nrepas;
    private javax.swing.JTextField pro;
    private javax.swing.JLabel q;
    private javax.swing.JTextField quantiter;
    private javax.swing.JButton supprimer_un_article_autableau;
    private javax.swing.JComboBox type;
    // End of variables declaration//GEN-END:variables
private void insertRepas(String nrepas, String type) {
    // Requête SQL pour l'insertion d'un repas
    String query = "INSERT INTO meals (name, type) VALUES (?, ?)";
    
    // Obtenir la connexion à la base de données
    connexion c = new connexion();
   ;
    
    try {
        // Préparer la déclaration SQL
        PreparedStatement pstmt = c.con.prepareStatement(query);
        
        // Remplacer les paramètres de la requête par les valeurs fournies
        pstmt.setString(1, nrepas);
        pstmt.setString(2, type);
        
        // Exécuter la requête d'insertion
        pstmt.executeUpdate();
        
        // Fermer la déclaration
        pstmt.close();
        
        
   
        
        // Afficher un message de succès
        JOptionPane.showMessageDialog(this, "Repas inséré avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException e) {
        // En cas d'erreur, afficher un message d'erreur
        JOptionPane.showMessageDialog(this, "Erreur lors de l'insertion du repas : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}
private void fillTartTable() {
    // Requête SQL pour sélectionner les données à afficher dans le JTable Tart
    String query = "SELECT name, calories, carbohydrates, proteins, fats FROM fooditems";
    
    // Obtenir la connexion à la base de données
    connexion c = new connexion();
  
    
    try {
        // Préparer la déclaration SQL
        PreparedStatement pstmt = c.con.prepareStatement(query);
        
        // Exécuter la requête de sélection
        ResultSet rs = pstmt.executeQuery();
        
        // Créer un objet DefaultTableModel pour stocker les données du tableau
        DefaultTableModel model = (DefaultTableModel) Tar.getModel();
        
        // Effacer le contenu existant du modèle de tableau
        model.setRowCount(0);
        
        // Parcourir les résultats de la requête et ajouter chaque ligne au modèle de tableau
        while (rs.next()) {
            String name = rs.getString("name");
            int calories = rs.getInt("calories");
            int carbohydrates = rs.getInt("carbohydrates");
            int proteins = rs.getInt("proteins");
            int fats = rs.getInt("fats");
            
            // Ajouter une nouvelle ligne au modèle de tableau
            model.addRow(new Object[]{name, calories, carbohydrates, proteins, fats});
        }
        
        // Fermer le résultat de la requête et la déclaration SQL
        rs.close();
        pstmt.close();
    } catch (SQLException e) {
        // En cas d'erreur, afficher un message d'erreur
        JOptionPane.showMessageDialog(this, "Erreur lors du remplissage du tableau Tart : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}
private void deleteFoodItem(int itemId) {
    // Requête SQL pour supprimer un élément de la table fooditems en utilisant son ID
    String query = "DELETE FROM fooditems WHERE id = ?";
    
    // Obtenir la connexion à la base de données
    connexion c = new connexion();
 
    
    try {
        // Préparer la déclaration SQL
        PreparedStatement pstmt = c.con.prepareStatement(query);
        
        // Remplacer le paramètre de la requête par la valeur de l'ID fournie
        pstmt.setInt(1, itemId);
        
        // Exécuter la requête de suppression
        int rowsAffected = pstmt.executeUpdate();
        
        // Vérifier si des lignes ont été affectées (c'est-à-dire si l'élément a été supprimé avec succès)
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "L'élément avec l'ID " + itemId + " a été supprimé avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
            
            // Actualiser le contenu du tableau après la suppression
            fillTartTable(); // Vous devez définir la méthode fillTartTable pour remplir le tableau avec les données mises à jour
        } else {
            JOptionPane.showMessageDialog(this, "Aucun élément avec l'ID " + itemId + " n'a été trouvé.", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
        
        // Fermer la déclaration SQL
        pstmt.close();
    } catch (SQLException e) {
        // En cas d'erreur, afficher un message d'erreur
        JOptionPane.showMessageDialog(this, "Erreur lors de la suppression de l'élément avec l'ID " + itemId + " : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}

}
